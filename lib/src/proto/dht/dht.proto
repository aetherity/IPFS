// lib/src/proto/dht/dht.proto
syntax = "proto3";

package ipfs.dht;

// Represents a peer participating in the DHT.
message DHTPeer {
  // Required: The ID of the peer.
  bytes id = 1;

  // Repeated: The multiaddresses of the peer.
  repeated string addrs = 2;
}

// Represents a record stored in the DHT.
message Record {
  // Required: The key of the record.
  bytes key = 1;

  // Required: The value of the record.
  bytes value = 2;

  // Optional: The publisher of the record.
  DHTPeer publisher = 3;

  // Optional: The sequence number of the record.
  uint64 sequence = 4;
}

// Represents a request to find providers for a key.
message FindProvidersRequest {
  // Required: The key to find providers for.
  bytes key = 1;

  // Optional: The maximum number of providers to return (default: unlimited).
  int32 count = 2;
}

// Represents a response to a FindProviders request.
message FindProvidersResponse {
  // Repeated: The providers found for the key.
  repeated DHTPeer providers = 1;

  // Optional: Whether or not closer peers were found during the search.
  bool closerPeers = 2;
}

// Represents a request to provide a record for a key.
message ProvideRequest {
  // Required: The key for which the record is being provided.
  bytes key = 1;

  // Optional: The peer providing the record.
  DHTPeer provider = 2;
}

// Represents a response to a Provide request.
message ProvideResponse {
  // Required: Whether or not the record was successfully provided.
  bool success = 1;
}

// Represents a request to find a value for a key.
message FindValueRequest {
  // Required: The key to find the value for.
  bytes key = 1;
}

// Represents a response to a FindValue request.
message FindValueResponse {
  // Optional: The value found for the key (if present).
  bytes value = 1;

  // Optional: The peers that are closer to the key (if no direct value is found).
  repeated DHTPeer closerPeers = 2;
}

// Represents a request to store a value for a key.
message PutValueRequest {
  // Required: The key to store the value for.
  bytes key = 1;

  // Required: The value to store.
  bytes value = 2;
}

// Represents a response to a PutValue request.
message PutValueResponse {
  // Required: Whether or not the value was successfully stored.
  bool success = 1;
}

// Represents a request to find a peer in the DHT by their ID.
message FindNodeRequest {
  // Required: The ID of the peer to find.
  bytes peerId = 1;
}

// Represents a response to a FindNode request.
message FindNodeResponse {
  // Repeated: The peers that are closer to the requested peer ID.
  repeated DHTPeer closerPeers = 1;
}
